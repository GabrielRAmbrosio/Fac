// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1


CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:

    Mux16(a=x,b=false,sel=zx,out=out1); 
    Not16(in=out1,out=out1neg);              
    Mux16(a=out1,b=out1neg,sel=nx,out=outmux1);

    Mux16(a=y,b=false,sel=zy,out=out2);
    Not16(in=out2,out=out2neg);
    Mux16(a=out2,b=out2neg,sel=ny,out=outmux2);

    Add16(a=outmux1,b=outmux2,out=plus);
    And16(a=outmux1,b=outmux2,out=and);
    Mux16(a=and,b=plus,sel=f,out=plusand);

    Not16(in=plusand,out=plusandneg);
    Mux16(a=plusand,b=plusandneg,sel=no,out=out, out[0..15]=saida, out[15]=ng);

    Or16Way(in=saida,out=outzr);
    Not(in=outzr,out=zr);
}
